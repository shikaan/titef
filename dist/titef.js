!function(t,e){for(var r in e)t[r]=e[r]}(exports,function(t){var e={};function r(E){if(e[E])return e[E].exports;var s=e[E]={i:E,l:!1,exports:{}};return t[E].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=t,r.c=e,r.d=function(t,e,E){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:E})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=3)}([function(t,e){const r={PENDING:"PENDING",SUCCESS:"SUCCESS",FAILURE:"FAILURE",IGNORED:"IGNORED"},E=Object.values(r);t.exports={EVENT:{PROCESS:{EXIT:"process:exit",EXIT_CODE:{FAILURE:"process:exit-code:failure"}},DATABASE:{RECORDSET:{CREATE:"database:recordset:create"},RECORD:{CREATE:"database:record:create",UPDATE:"database:record:update",CLOSE:"database:record:close"},PROCESS:{ENDED:"database:process:ended"}},SUITE:{STARTED:"suite:started",HOOKS:{REGISTER:"suite:hooks:register",UNREGISTER:"suite:hooks:unregister"},ENDED:"suite:ended"},SPEC:{SETUP:{REGISTER:"spec:before-each:register",UNREGISTER:"spec:before-each:unregister"},TEARDOWN:{REGISTER:"spec:after-each:register",UNREGISTER:"spec:after-each:unregister"},STARTED:"spec:started",SUCCESS:"spec:success",IGNORE:"spec:ignore",FAILURE:"spec:failure",ENDED:"spec:ended"},REPORTER:{REPORT:{START:"reporter:report:start",ENDED:"reporter:report:ended"}}},RESULT:r,RESULTS:E}},function(t,e){t.exports=require("events")},function(t,e){t.exports={isNumber:t=>"[object Number]"===Object.prototype.toString.call(t),isFunction:t=>/\[object (Async)?Function]/.test(Object.prototype.toString.call(t)),isObject:t=>"[object Object]"===Object.prototype.toString.call(t)}},function(t,e,r){const{EVENT:E,RESULT:s}=r(0),o=r(4),i=r(7),n=r(8),c=r(9),R=r(10);!function(){this._reporters=[o],R.on(E.SUITE.STARTED,t=>{i.emit(E.DATABASE.RECORDSET.CREATE,t)}),R.on(E.SUITE.HOOKS.REGISTER,(t,e)=>{c.emit(E.SPEC.SETUP.REGISTER,t),c.emit(E.SPEC.TEARDOWN.REGISTER,e)}),R.on(E.SUITE.HOOKS.UNREGISTER,()=>{c.emit(E.SPEC.SETUP.UNREGISTER),c.emit(E.SPEC.TEARDOWN.UNREGISTER)}),c.on(E.SPEC.STARTED,t=>{i.emit(E.DATABASE.RECORD.CREATE,t)}),c.on(E.SPEC.SUCCESS,t=>{i.emit(E.DATABASE.RECORD.UPDATE,t,s.SUCCESS)}),c.on(E.SPEC.IGNORE,t=>{i.emit(E.DATABASE.RECORD.UPDATE,t,s.IGNORED)}),c.on(E.SPEC.FAILURE,(t,e)=>{i.emit(E.DATABASE.RECORD.UPDATE,t,s.FAILURE,e),n.emit(E.PROCESS.EXIT_CODE.FAILURE)}),c.on(E.SPEC.ENDED,t=>{i.emit(E.DATABASE.RECORD.CLOSE,t)}),i.on(E.DATABASE.PROCESS.ENDED,t=>{R.emit(E.SUITE.ENDED),this._reporters.forEach(e=>{e.emit(E.REPORTER.REPORT.START,t)})}),this._reporters.forEach(t=>{t.on(E.REPORTER.REPORT.ENDED,()=>{n.emit(E.PROCESS.EXIT)})})}(),t.exports={suite:R.suite.bind(R),spec:c.spec.bind(c),xspec:c.xspec.bind(c)}},function(t,e,r){const E=r(1),{printDatabase:s}=r(5),{EVENT:o}=r(0);t.exports=new class extends E{constructor(){super(),this.on(o.REPORTER.REPORT.START,async t=>{await s(t),this.emit(o.REPORTER.REPORT.ENDED)})}}},function(t,e,r){const{isFunction:E}=r(2),{TEXT_FORMAT:s}=r(6),{RESULT:o}=r(0),i=(...t)=>{const e=[...t,s.RESET,"\n"];return process.stdout.write(e.map(String).join(""))},n=t=>E(t)?t.name:String(t);t.exports={printDatabase:async t=>{const e={};Object.keys(t).forEach(r=>{i(s.BOLD,`SUITE: ${r}`),Object.values(t[r]).forEach(t=>{t.result===o.SUCCESS?i(s.GREEN,`[ âœ” ] ${t.title}`):t.result===o.IGNORED?i(s.YELLOW,`[ - ] ${t.title}`):t.result===o.PENDING?i(s.GREY,`[...] ${t.title}`):(i(s.RED,`[ âœ• ] ${t.title}`),e[`${t.suite} > ${t.title}`]=t.payload)})});const r=Object.entries(e);r.length&&(i(s.BOLD,"\nError details:"),r.forEach((t,e)=>{const r=t[0],E=t[1];i(s.BOLD,`\n${e+1}) ${r}`),(t=>{const e=(t=>t.message?t.message:t.toString().split(":").slice(-1)[0])(t);if((t=>"ERR_ASSERTION"===t.code||0===t.toString().indexOf("AssertionError"))(t)){const r=n(t.operator),E=n(t.expected),o=n(t.actual);i(`ASSERTION FAILURE: ${e}`),"fail"===r?i("\tUnexpected:\t",s.RED,`${o}`):!r&&t.expected&&t.actual&&(i("\tExpected:\t",s.GREEN,E),i("\tActual:\t\t",s.RED,o))}else i(`ERROR: ${e}`);i(s.GREY,t.stack)})(E)}))}}},function(t,e){t.exports={TEXT_FORMAT:{RED:"[31m",GREEN:"[32m",YELLOW:"[33m",RESET:"[0m",BOLD:"[1m",GREY:"[90m"}}},function(t,e,r){const E=r(1),{EVENT:s,RESULT:o,RESULTS:i}=r(0);t.exports=new class extends E{constructor(){super(),this._recordsets={},this._processed=0,this._currentSuite=null,this.on(s.DATABASE.RECORDSET.CREATE,this.createRecordset),this.on(s.DATABASE.RECORD.CREATE,this.createRecord),this.on(s.DATABASE.RECORD.UPDATE,this.updateRecord),this.on(s.DATABASE.RECORD.CLOSE,this.closeRecord)}createRecordset(t){this._currentSuite=t,this._recordsets[this._currentSuite]={}}createRecord(t){if(!this._currentSuite)throw new TypeError("Unable to find current Suite!");if(!t)throw new TypeError("Missing record title!");if(!this._recordsets[this._currentSuite])throw new TypeError(`Missing or null records list for ${this._currentSuite}`);this._recordsets[this._currentSuite][t]={title:t,suite:this._currentSuite,result:o.PENDING,payload:null}}updateRecord(t,e,r){if(!this._currentSuite)throw new TypeError("Unable to find current Suite!");if(!i.includes(e))throw new TypeError(`Result should be one of ${i.join()}. Got ${e}.`);this._recordsets[this._currentSuite][t]=Object.assign({},this._recordsets[this._currentSuite][t],{result:e,payload:r})}closeRecord(){this._processed+=1;const t=Object.keys(this._recordsets[this._currentSuite]).length;this._processed===t&&this.emit(s.DATABASE.PROCESS.ENDED,this._recordsets)}}},function(t,e,r){const E=r(1),{EVENT:s}=r(0);t.exports=new class extends E{constructor(){super(),this._exitCode=0,this.on(s.PROCESS.EXIT,()=>{process.exit(this._exitCode)}),this.on(s.PROCESS.EXIT_CODE.FAILURE,()=>{this._exitCode=1})}}},function(t,e,r){const E=r(1),{EVENT:s}=r(0);t.exports=new class extends E{constructor(){super(),this.before=null,this.after=null,this.on(s.SPEC.SETUP.REGISTER,t=>{this.before=t}),this.on(s.SPEC.TEARDOWN.REGISTER,t=>{this.after=t}),this.on(s.SPEC.SETUP.UNREGISTER,()=>{this.before=null}),this.on(s.SPEC.TEARDOWN.UNREGISTER,()=>{this.after=null})}async spec(t,e){this.emit(s.SPEC.STARTED,t),this.before&&this.before();try{await e(),this.emit(s.SPEC.SUCCESS,t)}catch(e){this.emit(s.SPEC.FAILURE,t,e)}this.after&&this.after(),this.emit(s.SPEC.ENDED,t)}async xspec(t){this.emit(s.SPEC.STARTED,t),this.emit(s.SPEC.IGNORE,t),this.emit(s.SPEC.ENDED,t)}}},function(t,e,r){const E=r(1),{isFunction:s,isObject:o}=r(2),{EVENT:i}=r(0);class n extends E{static argumentParser(t,e){const r=t[0],E=t[1];switch(t.length){case 1:if(!s(r))throw new TypeError("Second argument must be a function!");return{options:e,callback:r};case 2:if(!o(r))throw new TypeError("Second argument must be an object!");if(!s(E))throw new TypeError("Third argument must be a function!");return{options:Object.assign({},e,r),callback:E};default:throw new TypeError(`Invalid arguments! Expected (title: string, options?: object, callback: function). Actual: ${t.map(String).join()}`)}}suite(t,...e){const r=String(t);this.emit(i.SUITE.STARTED,r);const E={title:r,setup:Function(),teardown:Function(),eachSetup:Function(),eachTeardown:Function()},{options:o,callback:c}=n.argumentParser(e,E);if(this.emit(i.SUITE.HOOKS.REGISTER,o.eachSetup,o.eachTeardown),!s(o.setup))throw new TypeError("Setup must be a function!");o.setup(),c(),this.once(i.SUITE.ENDED,()=>{if(!s(o.teardown))throw new TypeError("Teardown must be a function!");o.teardown(),this.emit(i.SUITE.HOOKS.UNREGISTER)})}}t.exports=new n}]));