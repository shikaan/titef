!function(t,e){for(var r in e)t[r]=e[r]}(exports,function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=4)}([,,function(t,e){t.exports=require("events")},function(t,e){t.exports={isNumber:t=>"[object Number]"===Object.prototype.toString.call(t),isFunction:t=>/\[object (Async)?Function]/.test(Object.prototype.toString.call(t)),isObject:t=>"[object Object]"===Object.prototype.toString.call(t)}},function(t,e,r){const{suite:n}=r(5),{spec:o,xspec:s}=r(10);t.exports={suite:n,spec:o,xspec:s}},function(t,e,r){const n=r(2),{isFunction:o,isObject:s}=r(3),{EVENT:c}=r(9);class i extends n{static argumentParser(t,e){const r=t[0],n=t[1];switch(t.length){case 1:if(!o(r))throw new TypeError("Second argument must be a function!");return{options:e,callback:r};case 2:if(!s(r))throw new TypeError("Second argument must be an object!");if(!o(n))throw new TypeError("Third argument must be a function!");return{options:Object.assign({},e,r),callback:n};default:throw new TypeError(`Invalid arguments! Expected (title: string, options?: object, callback: function). Actual: ${t.map(String).join()}`)}}suite(t,...e){const r=String(t);this.emit(c.SUITE.STARTED,r);const n={title:r,setup:()=>{},teardown:()=>{}},{options:s,callback:a}=i.argumentParser(e,n);if(!o(s.setup))throw new TypeError("Setup must be a function!");if(s.setup(),a(),!o(s.teardown))throw new TypeError("Teardown must be a function!");s.teardown()}}t.exports=new i},,,,function(t,e){t.exports={EVENT:{PROCESS:{EXIT:"process:exit",EXIT_CODE:{FAILURE:"process:exit-code:failure"}},DATABASE:{RECORDSET:{CREATE:"database:recordset:create"},RECORD:{CREATE:"database:record:create",UPDATE:"database:record:update",CLOSE:"database:record:update"},PROCESS:{ENDED:"database:process:ended"}},SUITE:{STARTED:"suite:started"},SPEC:{STARTED:"spec:started",SUCCESS:"spec:success",IGNORE:"spec:ignore",FAILURE:"spec:failure",ENDED:"spec:ended"},REPORTER:{REPORT:{START:"reporter:report:start",ENDED:"reporter:report:ended"}}}}},function(t,e,r){const n=r(2),{EVENT:o}=r(9);t.exports=new class extends(n()){async spec(t,e){this.emit(o.SPEC.STARTED,t);try{await e(),this.emit(o.SPEC.SUCCESS,t)}catch(e){this.emit(o.SPEC.FAILURE,t,e)}this.emit(o.SPEC.ENDED)}async xspec(t){this.emit(o.SPEC.STARTED,t),this.emit(o.SPEC.IGNORE,t),this.emit(o.SPEC.ENDED)}}}]));