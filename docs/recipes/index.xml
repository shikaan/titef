<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recipes on titef</title>
    <link>http://example.com/recipes/</link>
    <description>Recent content in Recipes on titef</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	<atom:link href="http://example.com/recipes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sync</title>
      <link>http://example.com/recipes/sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.com/recipes/sync/</guid>
      <description>Code Suppose you have a sync function
// test/fixtures/sum.js const sum = (a, b) =&amp;gt; { const saneA = Number.parseInt(a, 10); const saneB = Number.parseInt(b, 10); if(Number.isNaN(saneA)) { throw new TypeError(&#39;First argument is not number&#39;) } if(Number.isNaN(saneB)) { throw new TypeError(&#39;Second argument is not number&#39;) } return saneA + saneB; }  Test (with CLI) Then what you need to do is create a test file, for instance sum.specs.js:</description>
    </item>
    
    <item>
      <title>Async (with promises)</title>
      <link>http://example.com/recipes/async-promise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.com/recipes/async-promise/</guid>
      <description>Code Suppose you have an async function which returns a Promise.
// test/fixtures/asyncSum.js const asyncSum = (a, b) =&amp;gt; { return new Promise((resolve, reject) =&amp;gt; { const saneA = Number.parseInt(a, 10); const saneB = Number.parseInt(b, 10); if(Number.isNaN(saneA)) { reject(&#39;First argument is not number&#39;) } if(Number.isNaN(saneB)) { reject(&#39;Second argument is not number&#39;) } resolve(saneA + saneB); }) }  Test (with CLI) Then what you need to do is create a test file, for instance sum-async.</description>
    </item>
    
    <item>
      <title>Async (with callbacks)</title>
      <link>http://example.com/recipes/async-callback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.com/recipes/async-callback/</guid>
      <description>Code Suppose you have an async function with a callback (seriously?!). What we&amp;rsquo;ll be doing is simply using the promisify method in Node utillibrary to transform that function to a Promise based async function and then use what we already did in Recipe #2.
Let&amp;rsquo;s take for example Node&amp;rsquo;s fs.readFile.
Then what you need to do is create a test file, for instance async-node.specs.js (if you&amp;rsquo;ll be wondering what spec and suite do, please go here; if you&amp;rsquo;ll be wondering how to use async go here).</description>
    </item>
    
    <item>
      <title>setInterval, setTimeout</title>
      <link>http://example.com/recipes/interval-timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.com/recipes/interval-timeout/</guid>
      <description>If for some reasons you need to use setTimeout or setInterval in your tests, you can do that pretending they&amp;rsquo;re returning a Promise. Titef under the hoods overrides this two methods replacing them with a Promise-based version which can be used as you did with old ones.
Test (with CLI) // test/async-timeout.specs.js const { suite, spec, xspec } = require(&#39;../&#39;); const assert = require(&#39;assert&#39;); suite(&#39;AsyncTimeout&#39;, () =&amp;gt; { spec(&#39;should add one&#39;, async () =&amp;gt; { let count = 1; await setTimeout(() =&amp;gt; { count = count + 1; }, 1000) assert.</description>
    </item>
    
  </channel>
</rss>